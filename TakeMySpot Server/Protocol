This file documents the protocol used to interact with the server.
The commands are listed first, and then each is detailed with sample usage and possible returns.
Commands are submitted as HTTP POST requests with embedded JSON in the body.
The command is designated as the endpoint, ie
POST /<command> HTTP/1.1
<headers, including content length>
<json>


Commands that currently work:
    create
        POST /create HTTP/1.1
        Content-Length: <length>
        {
            "userID" : "<new userID>",
            "name" : "<user's name>",
            "vehicle" : "<description of vehicle>"
        }

        Adds a user to the database (currently just a file)
        Checks to make sure the userID isn't already present in the database

        returns
        success -
            HTTP/1.1 200 OK
            Content-Length: <length>
            {
                "reply" : "success"
            }
        invalid arguments, too many, too few, or not the right fields
            HTTP/1.1 404 Error
            Content-Length: <length>
            {
                "description" : "Invalid arguments"
            }

    connect

        {
            "userID" : "<userID"
        }

        Matches a socket with a userID in the servers memory, in this way sockets need only send commands
        without constantly identifying themselves. Also returns the user's previous data

        returns
        success -
            {
                "reply" : "success",
                "name" : "<user's name>",
                "vehicle" : "<description of user's vehicle",
            }
        invalid arguments, too many, too few, or not the right fields
            {
                "reply" : "error",
                "description" : "Invalid arguments"
            }
        User not found in the database, consider using create to make one
            {
                "reply" : "error",
                "description" : "User not found"
            }



Since we are using http as a wrapping protocol here is what I am expecting:
I will be using as per Olivier's suggestion different endpoints for different commands

eg to connect it would look something like this
POST /connect HTTP/1.1
<headers>
{
    "userID" : "<userID>"
}

or

POST /create HTTP/1.1
<headers>
{
    "userID" : "<userID>",
    "name"   : "<name>",
    "vehicle": "<vehicle description>"
}