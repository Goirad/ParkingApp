
This file documents the protocol used to interact with the server.
The commands are listed first, and then each is detailed with sample usage and possible returns.
Commands are submitted as HTTP POST requests with embedded JSON in the body.
The command is designated as the endpoint, ie
POST /<command> HTTP/1.1
<headers, including content length>
<json>

All commands must include 'userID' : "<userID>"
Commands that currently work:
    create
        POST /create HTTP/1.1
        Content-Length: <length>
        {
            "userID" : "<new userID>",
            "name" : "<user's name>",
            "vehicle" : "<description of vehicle>"
        }

        Adds a user to the database (currently just a file)
        Checks to make sure the userID isn't already present in the database

        returns
        success -
            HTTP/1.1 200 OK
            Content-Length: <length>
            {
                "success" : true
            }
        invalid arguments, too many, too few, or not the right fields
            HTTP/1.1 404 Error
            Content-Length: <length>
            {
                "success" : false,
                "description" : "Invalid arguments"
            }

    connect
        POST /connect HTTP/1.1
        Content-Length: <length>
        {
            "userID" : "<userID>"
        }

        returns
        success -
            HTTP/1.1 200 OK
            Content-Length: <length>
            {
                "success" : true,
                "name" : "<user's name>",
                "vehicle" : "<description of user's vehicle",
            }
        invalid arguments, too many, too few, or not the right fields
            HTTP/1.1 404 ERROR
            Content-Length: <length>
            {
                "success" : false,
                "description" : "Invalid arguments"
            }
        User not found in the database, consider using create to make one
            HTTP/1.1 404 ERROR
            Content-Length: <length>
            {
                "success" : false,
                "description" : "User not found"
            }
    disconnect
        POST /disconnect HTTP/1.1
        Content-Length: <length>
        {
            "userID" : "<userID"
        }

        returns
        success
            HTTP/1.1 200 OK
            Content-Length: <length>
            {
                "success" : true
            }

        invalid arguments,
        user not found

    park
        POST /park HTTP/1.1
        Content-Length: <length>
        {
          "userID" : "<userID>"
        }

        returns success, invalid args, and user not connected

        Once you are in the queue, the server will send you updates once per tick, which may be any of the following:

        {
            "userID" : "<userID>",
            "position" : <position in queue>
        }

        if matched:

        {
            "userID" : "<userID>",
            "position" : <position in queue>,
            "matchUserID" : "<match's userID>",
            "vehicle" : "<match vehicle description>"
            "matchLocation" : "<description of the match's physical location, where they are currently parked>"
        }

        at this point the right thing to do is to send a message either to /accept or /decline containing just your userID.



    leave
        POST /leave HTTP/1.1
        Content-Length: <length>
        {
          "userID" : "<userID>",
          "locationDescription" : "<description of location>"
        }

        returns success, invalid args, user not connected, and no one wants to leave



    accept

        POST /accept HTTP/1.1
        Content-Length: <length>
        {
          "userID" : "<userID>"
        }

    decline
        POST /decline HTTP/1.1
        Content-Length: <length>
        {
          "userID" : "<userID>"
        }

    cancel
        POST /cancel HTTP/1.1
        Content-Length: <length>
        {
          "userID" : "<userID>"
        }














